{"version":3,"sources":["context/PokeContext.js","context/PokeProvider.js","components/Pokedex.jsx","App.js","reportWebVitals.js","index.js"],"names":["PokeContext","createContext","PokeProvider","children","useState","data","setData","pkmnID","setPkmnID","pkmnName","setPkmnName","useEffect","endpoint","fetch","then","response","json","results","getPokemon","fetchPkmnByName","context","Provider","value","Pokedex","useContext","pkmnNumber","className","htmlFor","type","id","placeholder","onChange","target","Number","toLowerCase","onClick","types","map","index","length","name","toUpperCase","substr","src","alt","height","weight","stats","stat","base_stat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0240d63b.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PokeContext = createContext();\n\nexport default PokeContext;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PokeContext from './PokeContext';\n\nfunction PokeProvider({ children }) {\n  const [data, setData] = useState();\n  const [pkmnID, setPkmnID] = useState(1);\n  const [pkmnName, setPkmnName] = useState('bulbasaur');\n\n  const  getPokemon = () => {\n    const endpoint = `https://pokeapi.co/api/v2/pokemon/${pkmnID}`;\n    fetch(endpoint)\n      .then((response) => response.json()\n        .then((results) => setData(results)));\n  }\n  \n  const fetchPkmnByName = () => {\n    const endpoint = `https://pokeapi.co/api/v2/pokemon/${pkmnName}`;\n    fetch(endpoint)\n      .then((response) => response.json()\n        .then((results) => setPkmnName(results)));\n  };\n  \n  useEffect(() => {\n    getPokemon();\n  }, [pkmnID]);\n\n  useEffect(() => {\n    fetchPkmnByName();\n  }, [pkmnName])\n\n  const context =  {\n    data,\n    setData,\n    pkmnID,\n    setPkmnID,\n    pkmnName,\n    setPkmnName,\n  }\n\n  return (\n    <PokeContext.Provider value={ context }>\n      { children }\n    </PokeContext.Provider>\n  )\n}\n\nPokeProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PokeProvider;\n","import React, { useContext } from 'react';\nimport PokeContext from '../context/PokeContext';\nimport '../App.css';\nfunction Pokedex() {\n\n  const {data, pkmnID, setPkmnID, pkmnName, setPkmnName} = useContext(PokeContext);\n\n  let pkmnNumber = pkmnID;\n\n  const previousPkmn = () => {\n    if(pkmnID > 1){\n      setPkmnID(pkmnNumber -= 1);\n    }\n  }\n\n  const nextPkmn = () => {\n    setPkmnID(pkmnNumber += 1);\n  }\n\n  const searchByID = ({target:{value}}) => {\n    if (value === '') {\n      value = Number(1)\n    }\n    setPkmnID(Number(value));\n    pkmnNumber = Number(value);\n  }\n\n  const searchByName = ({ target: { value } }) => {\n    setPkmnName(value.toLowerCase());\n  }\n\n  const getIdFromName = () => {\n    setPkmnID(pkmnName.id);    \n  }\n\n  return (\n    <main className=\"main-pokedex\">\n      <section className=\"filters-container\">\n        <label htmlFor=\"pkmnID\">\n          {'Id#: '}\n        </label>\n        <input\n          type=\"number\"\n          id=\"pkmnID\"\n          placeholder=\"ID\"\n          onChange={searchByID}\n        />\n        <label htmlFor=\"pkmnName\">\n          {'Nome: '}\n        </label>\n        <input\n          type=\"text\"\n          id=\"pkmnName\"\n          onChange={searchByName}\n        />\n        <button\n          type=\"button\"\n          onClick={getIdFromName}\n        >\n          {'Procurar'}\n        </button>\n      </section>\n      <section>\n        <div className=\"pkmn-type\">\n          <p>Type:</p>\n          <ul>\n            {data && data.types.map(\n              ({ type }, index) =>\n                index <= data.types.length && (\n              <li>{type.name[0].toUpperCase() + type.name.substr(1)}</li>)\n              )}\n          </ul>\n        </div>\n        <div className=\"pokemon-container\">\n        <input\n          type=\"image\"\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${data && data.id}.gif`}\n          alt={data && data.name}\n          data-testid=\"pokemon_sprite\"\n          className=\"pkmn-img\"\n        />\n        <p\n          className=\"pkmn-name\"\n        >\n          { data && `${data.id}. ${data.name[0].toUpperCase() + data.name.substr(1) }`}\n        </p>\n        </div>\n        <div className=\"pkmn-stats\">\n          <p>{`Height: ${data && data.height/10}m`}</p>\n          <p>{`Weight: ${data && data.weight/10}Kg`}</p>\n          <p>Stats:</p>\n          {\n            <ul>\n            {data && data.stats.map(\n              ({ stat, base_stat }, index) =>\n                index <= data.stats.length &&\n                (\n                  <li>\n                    {`${stat.name[0].toUpperCase() + stat.name.substr(1)}: ${base_stat}`}\n                  </li>\n                ))}\n            </ul>\n          }\n        </div>\n        <div className=\"buttons-container\">\n          <button type=\"button\" onClick={previousPkmn}>\n          {'Anterior'}\n          </button>\n          <button type=\"button\" onClick={nextPkmn}>\n            {'Pr√≥ximo'}\n          </button>\n        </div>\n      </section>\n    </main>\n  )\n}\n\nexport default Pokedex;\n","import React from 'react';\nimport PokeProvider from './context/PokeProvider';\nimport Pokedex from './components/Pokedex';\nimport './App.css';\n\nfunction App() {\n  return (\n    <PokeProvider>\n      <Pokedex />\n    </PokeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}